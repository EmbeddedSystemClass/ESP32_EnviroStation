





void autoClean() {


  if (performCleanNow) {

    if (sps30.clean() == true) {

      Serial.println(F("fan-cleaning manually started"));

      delay(15000);                                                                // 10 second delay while fan cleaning takes place

      Serial.println(F("fan-cleaning Finished"));

      InfluxData row5("sps30autoclean");                                // Save to influxdb for tracking  //EXPEREMENTAL
      row5.addTag("location", "southdarenth");
      row5.addValue("value", 1);
      influx.prepare(row5);
      influx.write();

      performCleanNow = false;

    } else {

      Serial.println(F("Could NOT manually start fan-cleaning"));

    }

  }

}






/*





    Suggest saving a byte into eeprom every hour, with address n+1,

    total EEPROM/FLASH addresses = 512:
    Save number from 0 to 255 in each:


    when n = 168, 336, or 504 then one week has passed and autoclean is triggered

    if n > 508  n=0

    Save this intoinflux db for record keeping


    this means eeprom is being written to once every 3 weeks.

    total writes expected on eeprom 100,000

    so it should last 300,000 weeks

    5796 years.

    I think thats good enough/

    Flash memory could be only 10,000 writes

    30,000 weeks

    576.9 years.

    Probably still be fine either way.





*/

uint16_t n = 0;   // essensialy a 1 hour loop counter counts up one every 4 hours

uint32_t recordTime = 3600000;    // 1h in milliseconds

uint32_t currentMillis = 0;





// This script saves the interval outlined above
void saveInterval() {

  // Recording Hours Passing

  if (millis() - currentMillis > recordTime) {

    Serial.println("Saving Byte in EEPROM");
     EEPROM.write(n, 1);
     EEPROM.commit();
    Serial.println(n);

    if (n == 168 || n == 336 || n > 504) {     // if n has reached the 1 week mark

      performCleanNow = true;

    }

    currentMillis = millis();

    Serial.println(currentMillis);

    n++;     // ins
  }


  // Resetting of Recording when running out of memory locations

  if (n > 506) {       // If we are running out of memory locations

    n = 0;                         // reset n

    Serial.println("Wiping EEprom");
    
    for (int i = 0; i > 512; i++) {      // Wipe all the eeprom memory ready to start over
       EEPROM.write(i, 0);
      EEPROM.commit();

    }
    Serial.println("EEprom Reset");
  }


}





// this script recalls the interval as outlined above, this only needs to run once on start up, it runs through
// the eeprom memory, untill it finds a 0 or NOT a 1, and saves the number of the address as the number of n
void recallInterval() {


  int eepromRead = 1;

  int i = 0;

  Serial.println("Reading EEprom");

  while (eepromRead == 1) {

    eepromRead = EEPROM.read(i);    // reads eeprom addresses untill it no longer reads a 1, then exits the loop

    Serial.print(i);
    Serial.print(": ");
    Serial.print(eepromRead);

    i++;

  }  // when the loop exits, whichever number of i it ended up at is the number of n used to track cleaning cycles

  Serial.println("Found a Zero");

  n = i;

  Serial.println(n);

}








